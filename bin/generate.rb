#!/usr/bin/env ruby
# frozen_string_literal: true

root_dir = __dir__
lib_dir = File.join(root_dir, 'lib')
$LOAD_PATH << lib_dir

require 'hand_rank'

module HandRank
  class Generator
    # This is one time use script!
    #
    # We can convert back rank to the hand only by pre-calculation
    # of the hands. This process takes a while, so we use only
    # the product of this calculation.
    #
    # The generator itself published here for better understanding
    # from where all this data came from. The product of the generator is
    # a ruby module.
    #
    # As the result we should get the file:
    #   `lib/hand_rank/rank_to_hand.rb`
    #
    # This module extends with `HandRank::rank_to_hand`

    RANKS_NAMES = %w[2 3 4 5 6 7 8 9 T J Q K A].freeze

    def self.call
      File.open('lib/hand_rank/rank_to_hand.rb', 'w') do |f|
        f.puts('# frozen_string_literal: true')
        f.puts
        f.puts('module HandRank')
        f.puts('# This module is generated by bin/generator.rb')
        f.puts('# Do not edit it manually')
        f.puts
        f.puts
        f.write('  RANK_TO_HAND_VALUES = ')
        f.write(new.generate.to_s.gsub('}, ',"},\n    "))
        f.puts
        f.puts
        f.puts('  def rank_to_hand(rank)')
        f.puts('    RANK_TO_HAND_VALUES[rank]')
        f.puts('  end')
        f.puts('  module_function :rank_to_hand')
        f.puts('end')
      end
    end

    def generate
      report = (1..48).each_with_object({}) do |i1, acc|
        print_and_flush '.'
        ((i1 + 1)..49).each do |i2|
          ((i2 + 1)..50).each do |i3|
            ((i3 + 1)..51).each do |i4|
              ((i4 + 1)..52).each do |i5|
                cards_array = [i1, i2, i3, i4, i5]
                points = HandRank.get(cards_array)
                combination = HandRank.category_key(points)
                hand, ranks = process_cards(cards_array, combination)
                acc[points] = { combination: combination, ranks: ranks, hand: hand }
              end
            end
          end
        end
      end

      # this range is the adjustment for the C code output.
      # this block will sort the report
      (4097..36_874).each_with_object({}) do |l, acc|
        next unless report[l]

        acc[l] = report[l]
      end
    end

    private

    def print_and_flush(str)
      print str
      $stdout.flush
    end

    def process_cards(cards_array, combination)
      hand = cards_array.sort.map { |c| RANKS_NAMES[(c - 1) / 4] }


      return [%w[A 2 3 4 5], %w[A 5]] if (%w[A 2 3 4 5] - hand).empty?  # special ranks for lowest straigh{, flush}
      return [hand, []] if combination == 'straight_flush' && hand.last == 'A' # royal flush
      return [hand, [hand.first, hand.last]] if %w[straight straight_flush].include?(combination)
      return [hand, [hand.last]] if %w[high_card flush].include?(combination)

      beauty_hand = hand.each_with_object(Hash.new { |h, k| h[k] = 0 }) { |el, acc| acc[el] += 1 }
                        .to_a
                        .sort_by { |x| [x.last, RANKS_NAMES.index(x.first.to_s)] }
                        .each_with_object([]) { |(rank, count), acc| count.times { acc.push rank } }

      case combination
      when 'one_pair', 'three_of_a_kind', 'four_of_a_kind'  then [beauty_hand, [beauty_hand[4]]]
      when 'two_pairs', 'full_house'                        then [beauty_hand, [beauty_hand[1], beauty_hand[4]]]
      else raise(RuntimeError)
      end
    end
  end
end

HandRank::Generator.call
